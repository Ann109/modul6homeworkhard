from math import pi
class Figure:
        sides_count = 0

        def __init__(self, color=(0, 0, 0), *sides):
            self.filled = False  # –∑–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π, bool
            self.__sides = list(sides) if self.__is_valid_sides(*sides) else [1] * self.sides_count  # —Å–ø–∏—Å–æ–∫ —Å—Ç–æ—Ä–æ–Ω (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
            self.__color = list(color)  # —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB

        def get_color(self):
            return self.__color

        def __is_valid_color(self, r, g, b):
            if isinstance(r, int) and isinstance(g, int) and isinstance(b, int): #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
                if 0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255:  #  –ø—Ä–æ–≤–µ—Ä–∫–∞ r, g, b —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –±–æ–ª—å—à–µ 255
                    return True
            return False

        def set_color(self, r, g, b): #–ú–µ—Ç–æ–¥ set_color –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã r, g, b - —á–∏—Å–ª–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç __color –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–≤ –∏—Ö –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
            if self.__is_valid_color(r, g, b): # –∫ –º–µ—Ç–æ–¥—É __is_valid_color
                self.__color = (r, g, b)
                self.filled = True

        def __is_valid_sides(self, *args):
                return len(args) == self.sides_count and all(isinstance(args1, int) and args1 > 0 for args1 in args)

        def __len__(self):
            return sum(self.__sides)

        def get_sides(self):
            return self.__sides

        def set_sides(self, *sides):
                if len(sides) == len(self.__sides):
                        valid_sides = []
                        for side in sides:
                                if self.__is_valid_sides(side):
                                        valid_sides.append(side)

                                self.__sides = valid_sides


class Circle(Figure): #–∫–ª–∞—Å—Å –∫—Ä—É–≥
        sides_count = 1

        def __init__(self, color, *sides):  # R = C/2ùõë , –≥–¥–µ C ‚Äî –¥–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
            super().__init__(color, *sides)
            sideL = sides[0]
            self.__radius = sideL / (2 * pi)

        def get_square(self): #S = œÄr¬≤.
            return pi * self.__radius**2


class Triangle(Figure): #–∫–ª–∞—Å—Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        sides_count = 3

        def __init__(self, color, *sides):
            super().__init__(self, color, *sides) # super() –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–ª–∞—Å—Å—É –∫–∞–∫ –∏ Figure.

        def get_square(self): # P = a+b+c/2 —Ç.–∫. —Å—Ç–æ—Ä–æ–Ω —É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ 3, —Ç–æ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—ã –±—É–¥—É—Ç - [1, 1, 1]
            p = self.sides_count / 2 #–ø–æ–ª—É—á–∞–µ—Ç—Å—è 1,5- —ç—Ç–æ –ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä
            a = 1
            b = 1
            c = 1
            S = ((p*(p - a))*(p - b)*(p - c))**0,5
            print(S)


class Cube(Figure): #–∫–ª–∞—Å—Å –∫—É–±
        sides_count = 12

        def __init__(self, color, *sides):
            side = sides[0] if len(sides) == 1 else 1
            super().__init__(color, *[side] * self.sides_count)

        def get_volume(self):
            return self.get_sides()[0] ** 3


circle1 = Circle((200, 200, 100), 10)  # (–¶–≤–µ—Ç, —Å—Ç–æ—Ä–æ–Ω—ã)
cube1 = Cube((222, 35, 130), 6)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:
circle1.set_color(55, 66, 77) # –ò–∑–º–µ–Ω–∏—Ç—Å—è
print(circle1.get_color())
cube1.set_color(300, 70, 15) # –ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
print(cube1.get_color())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:
cube1.set_sides(5, 3, 12, 4, 5) # –ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
print(cube1.get_sides())
circle1.set_sides(15) # –ò–∑–º–µ–Ω–∏—Ç—Å—è
print(circle1.get_sides())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–∫—Ä—É–≥–∞), —ç—Ç–æ –∏ –µ—Å—Ç—å –¥–ª–∏–Ω–∞:
print(len(circle1))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—ë–º–∞ (–∫—É–±–∞):
print(cube1.get_volume())
